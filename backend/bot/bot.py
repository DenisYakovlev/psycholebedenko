from datetime import datetime
import pytz
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from channels.layers import get_channel_layer
from django.core.cache import cache
from django.conf import settings
from django.utils.timezone import make_aware
from celery import shared_task

from . import TOKEN, logger, month_names, day_names
from authorization.utils import generatePhoneVerificationTokens
from asgiref.sync import async_to_sync
from user.models import TelegramUser
from user.serializers import TelegramUserSerializer
from appointment.models import Appointment
from appointment.serializers import AppointmentCreateSerializer
from appointment.tasks import create_appointment_zoom_link
from schedule.models import Schedule
from .markups import gen_menu_markup, gen_settings_markup, phone_verification_markup


bot = telebot.TeleBot(TOKEN)


# refactor to utils
def format_date(date):
	tz = pytz.timezone(settings.TIME_ZONE)
	_date = date.astimezone(tz)

	day_name = day_names[_date.weekday()]
	month_name = month_names[_date.month]
	time = _date.strftime("%H:%M")

	return f"{day_name}, {_date.day} {month_name} –û {time}"

def format_status(status):
	formated_status = {
		"pending": "üü° –≤ –æ–±—Ä–æ–±—Ü—ñ",
		"appointed": "üü¢ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ",
		"complete": "üîµ –≤–∏–∫–æ–Ω–∞–Ω–æ",
		"denied": "üî¥ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ"
	}

	return formated_status[status]


# NEED TO REFACTOR ALL THIS

@bot.message_handler(commands=['start'])
def botDrivenAuthorization(message):
	# phone verification process should start after this message
	logger.debug("botDrivenAuthorization")

	user_data = message.from_user.to_dict()
	serializer = TelegramUserSerializer(data=user_data)

	response= \
	f"""
	*üéâ –í—ñ—Ç–∞—î–º–æ, {message.from_user.first_name}! üéâ*

	–í–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–ª–∏—Å—å —É –≤–µ–±-–∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –ø—Ä–∞–∫—Ç–∏–∫—É—é—á–æ–≥–æ
	–ø—Å–∏—Ö–æ–ª–æ–≥–∞ [–õ—è–Ω–Ω–æ–≥–æ –ê–Ω–¥—Ä—ñ—è](tg://user?id={settings.ADMIN_ID}).

	–í—Å—ñ –≤–∞—à—ñ –∑–∞–ø–∏—Å–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ –º–æ–∂–Ω–∞ 
	–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞.
	–ù–∞–∂–º—ñ—Ç—å –Ω–∞ *–º–µ–Ω—é* —â–æ–± –≤—ñ–¥—Ä–∏—Ç–∏ –≤–µ–±-–∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫.
	"""

	response_welcome_back= \
	f"""
	*üéâ –ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {message.from_user.first_name}! üéâ*

	–í–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–ª–∏—Å—å —É –≤–µ–±-–∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –ø—Ä–∞–∫—Ç–∏–∫—É—é—á–æ–≥–æ
	–ø—Å–∏—Ö–æ–ª–æ–≥–∞ [–õ—è–Ω–Ω–æ–≥–æ –ê–Ω–¥—Ä—ñ—è](tg://user?id={settings.ADMIN_ID}).

	–í—Å—ñ –≤–∞—à—ñ –∑–∞–ø–∏—Å–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ –º–æ–∂–Ω–∞ 
	–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞.
	–ù–∞–∂–º—ñ—Ç—å –Ω–∞ *–º–µ–Ω—é* —â–æ–± –≤—ñ–¥—Ä–∏—Ç–∏ –≤–µ–±-–∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫.
	"""

	if serializer.is_valid():
		# save user data if it's his first visit to app

		serializer.save()

		bot.send_message(message.chat.id, response, reply_markup=gen_menu_markup(message.chat.id), parse_mode="Markdown")
	else:
		# id error occurs if user is already authorized.
		# handle greetings of already authorized user.

		bot.send_message(message.chat.id, response_welcome_back, reply_markup=gen_menu_markup(message.chat.id), parse_mode="Markdown")


@shared_task
def webAppDrivenAuthorization(user_id, first_name, first_authorization=True):
	# notify user about his first authorization. All his auth data is already saved in db
	# phone verification process should start after this message
	logger.debug("webAppDrivenAuthorization")

	response= \
	f"""
	*üéâ –í—ñ—Ç–∞—î–º–æ, {first_name}! üéâ*

	–í–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–ª–∏—Å—å —É –≤–µ–±-–∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –ø—Ä–∞–∫—Ç–∏–∫—É—é—á–æ–≥–æ
	–ø—Å–∏—Ö–æ–ª–æ–≥–∞ [–õ—è–Ω–Ω–æ–≥–æ –ê–Ω–¥—Ä—ñ—è](tg://user?id={settings.ADMIN_ID}).

	–í—Å—ñ –≤–∞—à—ñ –∑–∞–ø–∏—Å–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ –º–æ–∂–Ω–∞ 
	–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞.
	–ù–∞–∂–º—ñ—Ç—å –Ω–∞ *–º–µ–Ω—é* —â–æ–± –≤—ñ–¥—Ä–∏—Ç–∏ –≤–µ–±-–∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫.
	"""

	if first_authorization:
		bot.send_message(user_id, response, reply_markup=gen_menu_markup(user_id), parse_mode="Markdown")


@shared_task
def handlePhoneVerification(user_id, wsToken, confirmToken, forceStart=False):
	# forceStart omits token check. Used in phone verification restart
	logger.debug("handlePhoneVerification")

	if not forceStart:
		# check if token already exists and doesn't need to refresh
		token = cache.get(wsToken)

		if token:
			return
		
	response = \
	f"""
	*üìû –ù–∞–¥–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞*

	
	–ù–∞–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é. ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è

	*
	–ß–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω, –∞–∫—Ç–∏–≤–∞—Ü—ñ—è —Å—Ç–∞–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—é.
	–ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ/—Ç—Ä—É–¥–Ω–æ—â–∞—Ö, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.
	*
	"""

	bot.send_message(user_id, response, reply_markup=phone_verification_markup, parse_mode="Markdown")

	# set up timestamps of start and timeout of verification
	tz = pytz.timezone(settings.TIME_ZONE)
	verification_start = int(datetime.now(tz=tz).timestamp())
	verification_end = verification_start + settings.PHONE_VERIFICATION_TIMEOUT_SECS

	cache.set(wsToken, confirmToken, settings.PHONE_VERIFICATION_TIMEOUT_SECS)
	return verification_start, verification_end


@shared_task
def handleAppointmentUpdateNotification(appointment_id):
	logger.debug("handleAppointmentUpdateNotification")
	
	appointment = Appointment.objects.get(id=appointment_id)

	if appointment.status == Appointment.Status.DENIED:
		response = \
		f"""
		*üìù {appointment.title}*

		–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –±—É–ª–∞ –≤—ñ–¥–º—ñ–Ω–µ–Ω–∞
		"""

		bot.send_message(appointment.user.id, response, parse_mode="Markdown")
		bot.send_message(settings.ADMIN_ID, response, parse_mode="Markdown",
			reply_markup=InlineKeyboardMarkup([
			[InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É', url=f'tg://user?id={appointment.user.id}')],
			[InlineKeyboardButton(text='–í—ñ–¥–∫—Ä–∏—Ç–∏ —É –ø–∞–Ω–µ–ª—ñ', url=f'https://psycholebedenko.online/admin/appointments/?state=0&user={appointment.user.id}')],
    	]))

		return

	user = TelegramUser.objects.get(id=appointment.user)
	formated_date = format_date(appointment.date.date)

	response_user = \
	f"""
	*üìù {appointment.title}*

	
	–î–∞–Ω—ñ –ø—Ä–æ –≤–∞—à—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –±—É–ª–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ

	üì° –§–æ—Ä–º–∞—Ç: *{"–û–Ω–ª–∞–π–Ω" if appointment.online else "–û—Ñ–ª–∞–π–Ω"}*
	üìç –ú—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è: {f"*{appointment.address}*" if appointment.address else f"[–ú—ñ—Ç —É Zoom]({appointment.zoom_link})"}
	üìå –°—Ç–∞—Ç—É—Å: *{format_status(appointment.status)}*
	üóì –î–∞—Ç–∞: *{formated_date}*
	"""

	response_admin = \
	f"""
	*üìù {appointment.title}*

	
	–î–∞–Ω—ñ –ø—Ä–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –±—É–ª–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ

	üì° –§–æ—Ä–º–∞—Ç: *{"–û–Ω–ª–∞–π–Ω" if appointment.online else "–û—Ñ–ª–∞–π–Ω"}*
	üìç –ú—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è: {f"*{appointment.address}*" if appointment.address else f"[–ú—ñ—Ç —É Zoom]({appointment.zoom_link})"}
	üìå –°—Ç–∞—Ç—É—Å: *{format_status(appointment.status)}*
	üóì –î–∞—Ç–∞: *{formated_date}*
	üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: *{user.first_name}*
	"""

	bot.send_message(user.id, response_user, parse_mode="Markdown")
	bot.send_message(settings.ADMIN_ID, response_admin, parse_mode="Markdown",
		reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É', url=f'tg://user?id={user.id}')],
        [InlineKeyboardButton(text='–í—ñ–¥–∫—Ä–∏—Ç–∏ —É –ø–∞–Ω–µ–ª—ñ', url=f'https://psycholebedenko.online/admin/appointments/?state=0&user={user.id}')],
    ]))
	

@shared_task
def handleAppointmentCreateNotification(appointment_id):
	logger.debug("handleAppointmentCreateNotification")

	appointment = Appointment.objects.get(id=appointment_id)

	user = TelegramUser.objects.get(id=appointment.user)
	formated_date = format_date(appointment.date.date)

	user_response = \
	f"""
	*üìù –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é*

	
	–í–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ –∑–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.

	üìå –ù–∞–∑–≤–∞: *{appointment.title}*
	üì° –§–æ—Ä–º–∞—Ç: *{"–û–Ω–ª–∞–π–Ω" if appointment.online else "–û—Ñ–ª–∞–π–Ω"}*
	üìç –ú—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è: *{appointment.address if appointment.address else "–ú—ñ—Ç —É Zoom"}*
	üóì –î–∞—Ç–∞: *{formated_date}*

	*
	–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞.
	*
	"""

	admin_response = \
	f"""
	*üìù –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é*

	
	–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.

	üìå –ù–∞–∑–≤–∞: *{appointment.title}*
	üì° –§–æ—Ä–º–∞—Ç: *{"–û–Ω–ª–∞–π–Ω" if appointment.online else "–û—Ñ–ª–∞–π–Ω"}*
	üìç –ú—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è: *{appointment.address if appointment.address else "–ú—ñ—Ç —É Zoom"}*
	üóì –î–∞—Ç–∞: *{formated_date}*
	üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: *{user.first_name}*
	"""


	bot.send_message(user.id, user_response, parse_mode="Markdown")

	bot.send_message(settings.ADMIN_ID, admin_response, parse_mode="Markdown",
		reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É', url=f'tg://user?id={user.id}')],
		[InlineKeyboardButton(text='–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏/—Å—Ç–≤–æ—Ä–∏—Ç–∏ –ª—ñ–Ω–∫ —É Zoom', callback_data=str(appointment_id))],
        [InlineKeyboardButton(text='–í—ñ–¥–∫—Ä–∏—Ç–∏ —É –ø–∞–Ω–µ–ª—ñ', url=f'https://psycholebedenko.online/admin/appointments/?state=0&status=pending&user={user.id}')],
    ]))


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
	logger.debug("callback handle")

	appointment = Appointment.objects.get(id=call.data)

	link = create_appointment_zoom_link(appointment.id)

	_data = {"status": "appointed", "zoom_link": link}

	serializer = AppointmentCreateSerializer(instance=appointment, data=_data, partial=True)
	
	if serializer.is_valid():
		obj = serializer.save()

		handleAppointmentUpdateNotification.delay(obj.id)
		return

	bot.send_message(settings.ADMIN_ID, f"errors: {serializer.errors}", parse_mode="Markdown")


@shared_task
def handleAppointmentCreateByAdminNotification(appointment_id):
	logger.debug("handleAppointmentCreateByAdminNotification")

	appointment = Appointment.objects.get(id=appointment_id)

	user = TelegramUser.objects.get(id=appointment.user)
	formated_date = format_date(appointment.date.date)

	response_user = \
	f"""
	*üìù –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é*

	
	–ü—Å–∏—Ö–æ–ª–æ–≥ –∑–∞–ø–∏—Å–∞–≤ –≤–∞—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.

	üìå –ù–∞–∑–≤–∞: *{appointment.title}*
	üì° –§–æ—Ä–º–∞—Ç: *{"–û–Ω–ª–∞–π–Ω" if appointment.online else "–û—Ñ–ª–∞–π–Ω"}*
	üìç –ú—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è: {f"*{appointment.address}*" if appointment.address else f"[–ú—ñ—Ç —É Zoom]({appointment.zoom_link})"}
	üóì –î–∞—Ç–∞: *{formated_date}*

	"""

	response_admin = \
	f"""
	*üìù –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é*

	
	–í–∏ –∑–∞–ø–∏—Å–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.

	üìå –ù–∞–∑–≤–∞: *{appointment.title}*
	üì° –§–æ—Ä–º–∞—Ç: *{"–û–Ω–ª–∞–π–Ω" if appointment.online else "–û—Ñ–ª–∞–π–Ω"}*
	üìç –ú—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è: {f"*{appointment.address}*" if appointment.address else f"[–ú—ñ—Ç —É Zoom]({appointment.zoom_link})"}
	üóì –î–∞—Ç–∞: *{formated_date}*
	üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: *{user.first_name}*

	"""

	bot.send_message(user.id, response_user, parse_mode="Markdown")
	bot.send_message(settings.ADMIN_ID, response_admin, parse_mode="Markdown",
		reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É', url=f'tg://user?id={user.id}')],
        [InlineKeyboardButton(text='–í—ñ–¥–∫—Ä–∏—Ç–∏ —É –ø–∞–Ω–µ–ª—ñ', url=f'https://psycholebedenko.online/admin/appointments/?state=0&user={user.id}')],
    ]))
	

@bot.message_handler(content_types=['contact']) 
def handle_contact(message):	
	logger.debug('handle_contact')

	# handle errors
	if message.contact is None:
		bot.send_message(message.chat.id, "No contact", reply_markup=phone_verification_markup)
		return
	if message.chat.id != message.contact.user_id:
		bot.send_message(message.chat.id, "Incorrect phone number", reply_markup=phone_verification_markup)
		return
	if not TelegramUser.objects.filter(id=message.contact.user_id).exists():
		bot.send_message(message.chat.id, "User does not exists", reply_markup=phone_verification_markup)
		return
	
	user = TelegramUser.objects.get(id=message.contact.user_id)
	wsToken, confirmToken = generatePhoneVerificationTokens(message.contact.user_id, user.auth_date)

	error_response = \
	f"""
	*‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞*

	–ß–∞—Å –Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–∏–π—à–æ–≤, –∞–±–æ
	–±—É–ª–∏ –Ω–∞–¥–∞–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ

	–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ
	–ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é.
	"""

	server_error = lambda error: \
	f"""
	*‚ùå –°–µ—Ä–≤–µ—Ä–∞ –ø–æ–º–∏–ª–∫–∞*

	{error}

	–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ
	–ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é.
	"""

	good_response = \
	f"""
	*‚úÖ –£—Å–ø—ñ—à–Ω–æ!*

	–¢–µ–ø–µ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥ –∑–º–æ–∂–µ –∑ –≤–∞–º–∏ –∑–≤'—è–∑–∞—Ç–∏ –ø—Ä–∏
	–Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π.

	*
	–í–∞—à–µ —ñ–º'—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ª–∏—à–µ 
	–¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∑–≤'—è–∑–∫—É –∑ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º. 
	–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∞.
	*
	"""

	# verify token 
	try:
		cached_confirmToken = cache.get(wsToken)

		if confirmToken != cached_confirmToken:
			bot.send_message(user.id, error_response, reply_markup=gen_settings_markup(user.id), parse_mode="Markdown")
			return 
	except:
		bot.send_message(user.id, error_response, reply_markup=gen_settings_markup(user.id), parse_mode="Markdown")
		return 

	phone_number = message.contact.phone_number

	data = {
		"id": user.id,
		"phone_number": phone_number if phone_number.startswith('+') else '+' + phone_number
	}

	serializer = TelegramUserSerializer(instance=user, data=data, partial=True)
	
	if serializer.is_valid():
		serializer.save()

		# notify client that phone number was verified and saved
		room_group_name = f"phone_verification_{wsToken}"
		channel_layer = get_channel_layer()

		async_to_sync(channel_layer.group_send)(
			room_group_name, 
			{
				"type": "client_message",
				"message": {
					"state": "connected",
					"confirmToken": confirmToken
				}
			}
		)

		bot.send_message(user.id, good_response, reply_markup=gen_settings_markup(user.id), parse_mode="Markdown")
	else:
		bot.send_message(user.id, server_error(str(serializer.errors)), reply_markup=phone_verification_markup, parse_mode="Markdown")


@bot.message_handler(regexp="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
def _settings(message):
	logger.debug("settings")
	user = TelegramUser.objects.get(id=message.from_user.id)

	_response = \
	f"""
	*‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –û—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç–∞:*

	üë§ –Ü–º'—è: *{user.first_name}*
	üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *{user.phone_number if user.phone_number else "–ù–µ–≤—ñ–¥–æ–º–∏–π"}*
	üïí –û–ø–æ–≤—ñ—â–µ–Ω–Ω—è: *{"üü¢ –í–∫–ª—é—á–µ–Ω—ñ" if user.notifications_on else "üî¥ –í–≤–∏–º–∫–Ω–µ–Ω—ñ"}*

	*
	–í–∞—à–µ —ñ–º'—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ª–∏—à–µ 
	–¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∑–≤'—è–∑–∫—É –∑ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º. 
	–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∞.
	*
	"""


	bot.send_message(message.from_user.id, _response, reply_markup=gen_settings_markup(message.from_user.id), parse_mode="Markdown")


@bot.message_handler(regexp="üìá –ú–µ–Ω—é")
def menu(message):
	logger.debug("menu")
	
	response = \
	f"""
	üìá –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
	"""

	bot.send_message(message.from_user.id, response, reply_markup=gen_menu_markup(message.chat.id))


@bot.message_handler(regexp="üî¥ –í–∏–º–∫–Ω—É—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
def notifications_off(message):
	logger.debug("notification off")

	user = TelegramUser.objects.get(id=message.chat.id)
	serializer = TelegramUserSerializer(user, data={"notifications_on": False}, partial=True)

	if serializer.is_valid():
		serializer.save()

		response = \
		f"""
		*‚úÖ –ó–º—ñ–Ω–µ–Ω–æ!*

		–¢–µ–ø–µ—Ä –±–æ—Ç *–Ω–µ –±—É–¥–µ* –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –≤–∞–º
		–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π —Ç–∞
		–≥—Ä—É–ø–æ–≤–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π.
		"""
		
		bot.send_message(user.id, response, reply_markup=gen_settings_markup(user.id), parse_mode="Markdown")
		return

	response = \
	f"""
	*‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞*

	–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ
	–ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é.
	"""

	bot.send_message(user.id, response, reply_markup=gen_settings_markup(user.id), parse_mode="Markdown")

@bot.message_handler(regexp="üü¢ –í–∫–ª—é—á–∏—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
def notifications_on(message):
	logger.debug("notifications on")

	user = TelegramUser.objects.get(id=message.chat.id)
	serializer = TelegramUserSerializer(user, data={"notifications_on": True}, partial=True)

	if serializer.is_valid():
		serializer.save()

		response = \
		f"""
		*‚úÖ –ó–º—ñ–Ω–µ–Ω–æ!*

		–¢–µ–ø–µ—Ä –±–æ—Ç *–±—É–¥–µ* –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –≤–∞–º
		–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π —Ç–∞
		–≥—Ä—É–ø–æ–≤–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π.
		"""
		
		bot.send_message(user.id, response, reply_markup=gen_settings_markup(user.id), parse_mode="Markdown")
		return

	response = \
	f"""
	*‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞*

	–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ
	–ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é.
	"""

	bot.send_message(user.id, response, reply_markup=gen_settings_markup(user.id), parse_mode="Markdown")

@bot.message_handler(regexp="üìû –û–Ω–æ–≤–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
def phone_update(message):
	logger.debug("phone update")
	user = TelegramUser.objects.get(id=message.chat.id)

	try:
		wsToken, confirmToken = generatePhoneVerificationTokens(user.id, user.auth_date)
		cache.set(wsToken, confirmToken, settings.PHONE_VERIFICATION_TIMEOUT_SECS)
	
		response = \
		f"""
		*üìû –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞*

		–ù–∞–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é. ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è

		*
		–ß–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω, –∞–∫—Ç–∏–≤–∞—Ü—ñ—è —Å—Ç–∞–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—é.
		–ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ/—Ç—Ä—É–¥–Ω–æ—â–∞—Ö, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.
		*
		"""

		bot.send_message(user.id, response, reply_markup=phone_verification_markup, parse_mode="Markdown")
		return
	except:
		response = \
		f"""
		*‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞*

		–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ
		–ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é.
		"""

		bot.send_message(user.id, response, reply_markup=gen_settings_markup(user.id), parse_mode="Markdown")


@bot.message_handler(regexp="üìû –ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
def phone_set(message):
	phone_update(message)


@bot.message_handler(regexp="üìë –ü–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
def full_info(message):
	_settings(message)

@bot.message_handler(regexp="üë®üèª‚Äçüíª –ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—É")
def write_to_admin(message):
	admin = TelegramUser.objects.get(id=settings.ADMIN_ID)

	bot.send_contact(message.chat.id, admin.phone_number, admin.first_name, admin.last_name, reply_markup=gen_menu_markup(message.chat.id))

@bot.message_handler(commands=["phone_test"])
def response(message):
	bot.send_message(message.from_user.id, "phone_markup", reply_markup=phone_verification_markup)

@bot.message_handler(commands=["menu_test"])
def response(message):
	bot.send_message(message.from_user.id, "menu_markup", reply_markup=gen_menu_markup(message.chat.id))


@bot.message_handler(commands=['test'])
def test(message):
	logger.debug("test")

	bot.send_message(message.from_user.id, "[test](https://psycholebedenko.online)", parse_mode="Markdown")